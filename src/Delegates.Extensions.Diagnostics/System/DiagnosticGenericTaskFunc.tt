<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using System.Threading.Tasks;

namespace System
{
    <#
    for (var i = 0; i < 17; i++)
    {
        var genericTypes = string.Empty;
        if (i == 1)
        {
            genericTypes = "T, ";
        }
        else if (i > 1)
        {
            var genericTypesBuilder = new StringBuilder();

            for (var j = 1; j < i + 1; j++)
            {
                genericTypesBuilder.Append('T').Append(j).Append(", ");
            }

            genericTypes = genericTypesBuilder.ToString();
        }
    #>

    /// <summary>
    /// Func diagnostic message
    /// </summary>
    public struct DiagnosticGenericTaskFunc<<#=genericTypes#>TResult>
    {
        private readonly Func<<#=genericTypes#>Task<TResult>> _func;

        /// <summary/>
        public DiagnosticGenericTaskFunc(Func<<#=genericTypes#>Task<TResult>> func) : this(null, null, func) { }

        /// <summary/>
        public DiagnosticGenericTaskFunc(string? category, Func<<#=genericTypes#>Task<TResult>> func) : this(category, null, func) { }

        /// <summary/>
        public DiagnosticGenericTaskFunc(string? category, object? data, Func<<#=genericTypes#>Task<TResult>> func)
        {
            _func = func.Diagnostic(category, data);
        }

        /// <summary>
        /// Implicit convert DiagnosticGenericTaskFunc to Func
        /// </summary>
        public static implicit operator Func<<#=genericTypes#>Task<TResult>>(DiagnosticGenericTaskFunc<<#=genericTypes#>TResult> func)
        {
            return func._func;
        }
    }
    <#}#>

}