<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
namespace System
{
    <#
    for (var i = 0; i < 17; i++)
    {
        var genericTypes = string.Empty;
        if (i == 1)
        {
            genericTypes = "<T>";
        }
        else if (i > 1)
        {
            var genericTypesBuilder = new StringBuilder();

            genericTypesBuilder.Append('<');
            for (var j = 1; j < i + 1; j++)
            {
                genericTypesBuilder.Append('T').Append(j).Append(", ");
            }
            genericTypesBuilder.Length = genericTypesBuilder.Length - 2;
            genericTypesBuilder.Append('>');

            genericTypes = genericTypesBuilder.ToString();
        }
    #>

    /// <summary>
    /// Action diagnostic message
    /// </summary>
    public struct DiagnosticAction<#=genericTypes#>
    {
        private readonly Action<#=genericTypes#> _action;

        /// <summary/>
        public DiagnosticAction(Action<#=genericTypes#> action) : this(null, null, action) { }

        /// <summary/>
        public DiagnosticAction(string? category, Action<#=genericTypes#> action) : this(category, null, action) { }

        /// <summary/>
        public DiagnosticAction(string? category, object? data, Action<#=genericTypes#> action)
        {
            _action = action.Diagnostic(category, data);
        }

        /// <summary>
        /// Implicit convert DiagnosticAction to Action
        /// </summary>
        public static implicit operator Action<#=genericTypes#>(DiagnosticAction<#=genericTypes#> action)
        {
            return action._action;
        }
    }
    <#}#>

}